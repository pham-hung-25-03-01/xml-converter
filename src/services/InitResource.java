package services;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.LinkOption;

public class InitResource {
    public static void init() throws IOException {
        String warning = "Please do not change content of this file, unless you know what you are doing\n" +
                         "This file is generated by the system, any manual changes will crash the system\n\n";
        new File("log/error.log") {{
            if (!exists()) {
                getParentFile().mkdirs();
                createNewFile();
            }
            setReadOnly();
        }};

        new File("log/date.log") {{
            if (!exists()) {
                getParentFile().mkdirs();
                createNewFile();
            }
            setReadOnly();
        }};

        File system = new File("config/.system.properties") {{
            if (!exists()) {
                getParentFile().mkdirs();
                createNewFile();
                if (length() == 0) {
                    FileOutputStream fos = new FileOutputStream(this);
                    fos.write(warning.getBytes());
                    fos.close();
                }
            }
            setReadOnly();
        }};
        Files.setAttribute(system.toPath(), "dos:hidden", true, LinkOption.NOFOLLOW_LINKS);

        File struct = new File("config/.struct.ini") {{
            if (!exists()) {
                getParentFile().mkdirs();
                createNewFile();
                if (length() == 0) {
                    FileOutputStream fos = new FileOutputStream(this);
                    fos.write(warning.getBytes());
                    fos.close();
                }
            }
            setReadOnly();
        }};
        Files.setAttribute(struct.toPath(), "dos:hidden", true, LinkOption.NOFOLLOW_LINKS);

        File header = new File("config/header/.header.ini") {{
            if (!exists()) {
                getParentFile().mkdirs();
                createNewFile();
                if (length() == 0) {
                    FileOutputStream fos = new FileOutputStream(this);
                    fos.write(warning.getBytes());
                    fos.close();
                }
            }
            setReadOnly();
        }};
        Files.setAttribute(header.toPath(), "dos:hidden", true, LinkOption.NOFOLLOW_LINKS);

        File object = new File("config/object/.object.ini") {{
            if (!exists()) {
                getParentFile().mkdirs();
                createNewFile();
                if (length() == 0) {
                    FileOutputStream fos = new FileOutputStream(this);
                    fos.write(warning.getBytes());
                    fos.close();
                }
            }
            setReadOnly();
        }};
        Files.setAttribute(object.toPath(), "dos:hidden", true, LinkOption.NOFOLLOW_LINKS);

        new File("config/default/folder.properties") {{
            if (!exists()) {
                getParentFile().mkdirs();
                createNewFile();
                if (length() == 0) {
                    FileOutputStream fos = new FileOutputStream(this);
                    fos.write((warning + "INPUT=log/input\nOUTPUT=log/output\nERROR=log/error\nPROCESS=log/process").getBytes());
                    fos.close();
                }
            }
        }};

        new File("config/default/database.properties") {{
            if (!exists()) {
                getParentFile().mkdirs();
                createNewFile();
                if (length() == 0) {
                    FileOutputStream fos = new FileOutputStream(this);
                    fos.write((warning + "DB_HOST=\nDB_PORT=\nDB_NAME=\nDB_USER=\nDB_PASSWORD=").getBytes());
                    fos.close();
                }
            }
        }};

        new File("config/default/query.properties") {{
            if (!exists()) {
                getParentFile().mkdirs();
                createNewFile();
                if (length() == 0) {
                    FileOutputStream fos = new FileOutputStream(this);
                    fos.write(warning.getBytes());
                    fos.close();
                }
            }
        }};

        new File("config/default/value.properties") {{
            if (!exists()) {
                getParentFile().mkdirs();
                createNewFile();
                if (length() == 0) {
                    FileOutputStream fos = new FileOutputStream(this);
                    fos.write(warning.getBytes());
                    fos.close();
                }
            }
        }};

    //     File pathFile = new File("config/.path.ini") {{
    //         if (!exists()) {
    //             getParentFile().mkdirs();
    //             createNewFile();
    //             if (length() == 0) {
    //                 FileOutputStream fos = new FileOutputStream(this);
    //                 fos.write((
    //                     "# Please do not change content of this file, unless you know what you are doing\n" +
    //                     "# This file is generated by the system, any manual changes will crash the system\n\n" +
    //                     "[DefaultValues]\nPATH=config/default/values.properties\n\n" +
    //                     "[DatabaseConfig]\nPATH=config/default/database.properties\n\n" +
    //                     "[Queries]\nPATH=config/default/queries.properties\n\n" +
    //                     "[DefaultLogFile]\nPATH=logs/default.log\n\n" +
    //                     "[DefaultTemplateFolder]\nPATH=config/templates\n\n" +
    //                     "[DefaultInputFolder]\nPATH=\n\n" +
    //                     "[DefaultErrorFolder]\nPATH=logs/ferrors\n\n" +
    //                     "[DefaultOutputFolder]\nPATH=logs/foutputs\n\n" +
    //                     "[DefaultProcessFolder]\nPATH=logs/fprocesses\n\n" +
    //                     "[FileheaderTemplate]\nPATH=config/templates/fileheader.xml"
    //                 ).getBytes());
    //                 fos.close();
    //             }
    //         }
    //         setReadOnly();
    //     }};

    //     Files.setAttribute(pathFile.toPath(), "dos:hidden", true, LinkOption.NOFOLLOW_LINKS);

    //     String defaultLogFilePath = Config.getConfigPath().get("DefaultLogFile", "PATH");

    //     new File(defaultLogFilePath) {{
    //         if (!exists()) {
    //             getParentFile().mkdirs();
    //             createNewFile();
    //         }
    //     }};

    //     String defaultValuesFilePath = Config.getConfigPath().get("DefaultValues", "PATH");

    //     new File(defaultValuesFilePath) {{
    //         if (!exists()) {
    //             getParentFile().mkdirs();
    //             createNewFile();
    //         }
    //     }};

    //     String databaseFilePath = Config.getConfigPath().get("DatabaseConfig", "PATH");

    //     new File(databaseFilePath) {{
    //         if (!exists()) {
    //             getParentFile().mkdirs();
    //             createNewFile();
    //             if (length() == 0) {
    //                 FileOutputStream fos = new FileOutputStream(this);
    //                 fos.write("DB_HOST=\nDB_PORT=\nDB_NAME=\nDB_USER=\nDB_PASSWORD=".getBytes());
    //                 fos.close();
    //             }
    //         }
    //     }};

    //     String queriesFilePath = Config.getConfigPath().get("Queries", "PATH");

    //     new File(queriesFilePath) {{
    //         if (!exists()) {
    //             getParentFile().mkdirs();
    //             createNewFile();
    //         }
    //     }};

    //     String fileHeaderTemplateFilePath = Config.getConfigPath().get("FileheaderTemplate", "PATH");

    //     new File(fileHeaderTemplateFilePath) {{
    //         if (!exists()) {
    //             getParentFile().mkdirs();
    //             createNewFile();
    //             if (length() == 0) {
    //                 FileOutputStream fos = new FileOutputStream(this);
    //                 fos.write("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<FileHeader>\n</FileHeader>".getBytes());
    //                 fos.close();
    //             }
    //         }
    //         setReadOnly();
    //     }};
    }
}