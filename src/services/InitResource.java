package services;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.LinkOption;

import utils.Config;

public class InitResource {
    public static void init() throws IOException {
        File pathFile = new File("configs/.path.ini") {{
            if (!exists()) {
                getParentFile().mkdirs();
                createNewFile();
                if (length() == 0) {
                    FileOutputStream fos = new FileOutputStream(this);
                    fos.write((
                        "# Please do not change content of this file, unless you know what you are doing\n" +
                        "# This file is generated by the system, any manual changes will crash the system\n\n" +
                        "[DefaultValues]\nPATH=configs/default/values.properties\n\n" +
                        "[DatabaseConfig]\nPATH=configs/default/database.properties\n\n" +
                        "[Queries]\nPATH=configs/default/queries.properties\n\n" +
                        "[DefaultLogFile]\nPATH=logs/default.log\n\n" +
                        "[DefaultTemplateFolder]\nPATH=configs/templates\n\n" +
                        "[DefaultInputFolder]\nPATH=\n\n" +
                        "[DefaultErrorFolder]\nPATH=logs/ferrors\n\n" +
                        "[DefaultOutputFolder]\nPATH=logs/foutputs\n\n" +
                        "[DefaultProcessFolder]\nPATH=logs/fprocesses\n\n" +
                        "[FileHeaderTemplate]\nPATH=configs/templates/file_header.xml"
                    ).getBytes());
                    fos.close();
                }
            }
            setReadOnly();
        }};

        Files.setAttribute(pathFile.toPath(), "dos:hidden", true, LinkOption.NOFOLLOW_LINKS);

        String defaultLogFilePath = Config.getConfigPath().get("DefaultLogFile", "PATH");

        new File(defaultLogFilePath) {{
            if (!exists()) {
                getParentFile().mkdirs();
                createNewFile();
            }
        }};

        String defaultValuesFilePath = Config.getConfigPath().get("DefaultValues", "PATH");

        new File(defaultValuesFilePath) {{
            if (!exists()) {
                getParentFile().mkdirs();
                createNewFile();
            }
        }};

        String databaseFilePath = Config.getConfigPath().get("DatabaseConfig", "PATH");

        new File(databaseFilePath) {{
            if (!exists()) {
                getParentFile().mkdirs();
                createNewFile();
                if (length() == 0) {
                    FileOutputStream fos = new FileOutputStream(this);
                    fos.write("DB_HOST=\nDB_PORT=\nDB_NAME=\nDB_USER=\nDB_PASSWORD=".getBytes());
                    fos.close();
                }
            }
        }};

        String queriesFilePath = Config.getConfigPath().get("Queries", "PATH");

        new File(queriesFilePath) {{
            if (!exists()) {
                getParentFile().mkdirs();
                createNewFile();
            }
        }};

        String fileHeaderTemplateFilePath = Config.getConfigPath().get("FileHeaderTemplate", "PATH");

        new File(fileHeaderTemplateFilePath) {{
            if (!exists()) {
                getParentFile().mkdirs();
                createNewFile();
                if (length() == 0) {
                    FileOutputStream fos = new FileOutputStream(this);
                    fos.write("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<FileHeader>\n</FileHeader>".getBytes());
                    fos.close();
                }
            }
        }};
    }
}
