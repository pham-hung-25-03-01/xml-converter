/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package views;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

import common.Config;
import common.Data;
import common.Generator;

/**
 *
 * @author sing1
 */
public class ValueDialog extends javax.swing.JDialog {
    private String value;
    private boolean isOK = false;
    private HashMap<String, String[]> listData = new HashMap<String, String[]>();

    public String getValue() {
        return value;
    }

    public boolean isOK() {
        return isOK;
    }
    /**
     * Creates new form ValueDialog
     */
    public ValueDialog(java.awt.Frame parent, boolean modal, String title) {
        super(parent, modal);
        initComponents();
        setHotKeys();
        setTitle(title);
        loadOptions();
        try {
            loadData();
            reset();
            this.setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Cannot load data", "Error", JOptionPane.ERROR_MESSAGE);
            this.dispose();
        }
    }

    private void setHotKeys() {
        this.getRootPane().setDefaultButton(btnOK);
    }

    private void loadOptions() {
        String[] options = Arrays.stream(Data.Type.values()).map(v -> v.toString().toLowerCase()).toArray(String[]::new);
        this.cbbValue.setModel(new DefaultComboBoxModel<>(options));
    }

    private void loadData() throws IOException {
        String[] fromDB = Config.getQueryFile().keySet().toArray(String[]::new);
        String[] fromGenerator = Arrays.stream(Generator.Type.values()).map(Enum::name).toArray(String[]::new);
        String[] fromDefaultValues = Config.getValueFile().keySet().toArray(String[]::new);
        this.listData.put("from_db", fromDB);
        this.listData.put("from_generator", fromGenerator);
        this.listData.put("from_default_values", fromDefaultValues);
    }

    public void reset() {
        this.txtPreview.setText("");
        this.txtValue.setText("");
        this.cbbDetailValue.setModel(new DefaultComboBoxModel<>());
        this.cbbDetailValue.setEnabled(false);
        this.cbbDetailValue.setFocusable(false);
        this.cbbValue.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtValue = new javax.swing.JTextField();
        btnClear = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();
        cbbValue = new javax.swing.JComboBox<>();
        cbbDetailValue = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtPreview = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Preview:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Value:");

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        cbbValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbValueActionPerformed(evt);
            }
        });

        txtPreview.setEditable(false);
        txtPreview.setColumns(20);
        txtPreview.setRows(1);
        txtPreview.setFocusable(false);
        jScrollPane1.setViewportView(txtPreview);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbbValue, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addComponent(cbbDetailValue, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnOK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(16, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(btnClear)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(btnAdd))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbbDetailValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbbValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)))
                .addComponent(btnOK)
                .addGap(19, 19, 19))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void loadDataForOption(String option) {
        String[] data = listData.get(option);
        this.cbbDetailValue.setModel(new DefaultComboBoxModel<>(data));
    }

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtPreview.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String result = this.txtPreview.getText();
        String option = this.cbbValue.getSelectedItem().toString();
        String input = this.txtValue.getText();
        String detailOption = this.cbbDetailValue.getItemCount() > 0 ? this.cbbDetailValue.getSelectedItem().toString() : "";
        if (option.equals("from_file") && (input == null || input.isBlank())) {
            JOptionPane.showMessageDialog(null, "Value is not empty", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (option.equals("from_template") && input.length() < 1) {
            JOptionPane.showMessageDialog(null, "Value is not empty", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        };
        switch(option) {
            case "from_file":
                result += "${" + input.trim() + "}";
                break;
            case "from_db":
                result += "@{" + detailOption + "}";
                break;
            case "from_generator":
                result += "#{" + detailOption + "}";
                break;
            case "from_default_values":
                result += "*{" + detailOption + "}";
                break;
            case "from_template":
                result += input;
                break;
            default:
                JOptionPane.showMessageDialog(this, "Option is not valid", "Error", JOptionPane.ERROR_MESSAGE);
                return;
        }
        this.txtPreview.setText(result);
        this.cbbValue.setSelectedIndex(0);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        String input = txtPreview.getText().trim();
        if (input == null || input.isBlank()) {
            JOptionPane.showMessageDialog(this, "Value of preview is not empty", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        this.value = input;
        this.isOK = true;
        this.setVisible(false);
    }//GEN-LAST:event_btnOKActionPerformed

    private void cbbValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbValueActionPerformed
        String option = this.cbbValue.getSelectedItem().toString();
        switch(option) {
            case "from_file":
            case "from_template":
                this.txtValue.setEnabled(true);
                this.txtValue.setFocusable(true);
                this.cbbDetailValue.setModel(new DefaultComboBoxModel<>());
                this.cbbDetailValue.setEnabled(false);
                this.cbbDetailValue.setFocusable(false);
                break;
            default:
                this.txtValue.setEnabled(false);
                this.txtValue.setFocusable(false);
                loadDataForOption(option);
                this.cbbDetailValue.setEnabled(true);
                this.cbbDetailValue.setFocusable(true);
        }
        this.txtValue.setText("");
    }//GEN-LAST:event_cbbValueActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ValueDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ValueDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ValueDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ValueDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ValueDialog dialog = new ValueDialog(new javax.swing.JFrame(), true, "Value");
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnOK;
    private javax.swing.JComboBox<String> cbbDetailValue;
    private javax.swing.JComboBox<String> cbbValue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtPreview;
    private javax.swing.JTextField txtValue;
    // End of variables declaration//GEN-END:variables
}
